
1、HashMap继承了AbstractMap类并实现了Map、Cloneable、Serializable；

2、数据结构是由数组+链表或红黑树，当链表长度超过7的时候自动转为红黑树。

3、扩容机制：默认长16，当链表数组的容量超过初始容量的0.75（填充因子），这是会调用resize进行扩容，将容量增大2倍。
为什么要扩容？
因为如果填充比很大，说明利用的空间很多，如果一直不进行扩容的话，链表就会越来越长，这样查找的效率很低，
扩容之后，将原来链表数组的每一个链表分成奇偶两个子链表分别挂在新链表数组的散列位置，这样就减少了每个链表的长度，增加查找效率。

4、get方法：获取key的hash值，计算hash&(n-1)得到在链表数组中的位置first=tab[hash&(n-1)],
先判断first的key是否与参数key相等，不等就遍历后面的链表找到相同的key值返回对应的Value值。

5、put方法
1，判断键值对数组tab[]是否为空或为null，否则以默认大小resize()；
2，根据键值key计算hash值得到插入的数组索引i，如果tab[i]==null，直接新建节点添加；
3，判断当前数组中处理hash冲突的方式为链表还是红黑树(check第一个节点类型即可),分别处理。

